Step 1

main.py

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.lang import Builder
from kivy.properties import StringProperty, BooleanProperty

from plyer import vibrator

Builder.load_string('''
#:import vibrator plyer.vibrator
<VibrationInterface>:
    orientation: 'vertical'
    Label:
        size_hint_y: None
        height: sp(40)
        text: 'vibrator exists: ' + str(vibrator.exists())
    Button:
        text: 'vibrate 10s'
        on_release: vibrator.vibrate(10)
    Button:
        text: 'vibrate 1s'
        on_release: vibrator.vibrate(1)
    Button:
        text: 'vibrate 0.1s'
        on_release: vibrator.vibrate(0.1)
    Button:
        text: 'cancel vibration'
        on_release: vibrator.cancel()
    TextInput:
        id: ti
        text: '0.5,0.5,1,2,0.1,0.1,0.1,0.1,0.1,0.1'
    Button:
        text: 'vibrate pattern'
        on_release:
            vibrator.pattern([float(n) for n in ti.text.split(',')],repeat=5)

''')


class VibrationInterface(BoxLayout):
    pass


class VibrationApp(App):
    
    title = 'Vibrator'

    def __init__(self, **kwargs):
        super(VibrationApp,self).__init__(**kwargs)

    def build(self):
        return VibrationInterface()

    def on_pause(self):
        return True


if __name__ == "__main__":
    VibrationApp().run()

android.txt

title=vibration
author=salib
orientation=landscape
***************************************************
 kivy.lang.BuilderException: Parser: File "<inline>", line 8:
 ...
       6:        size_hint_y: None
       7:        height: sp(40)
 >>    8:        text: 'vibrator exists: ' + str(vibrator.exists())
       9:    Button:
      10:        text: 'vibrate 10s'
 ...
 BuilderException: Parser: File "<inline>", line 8:
 ...
       6:        size_hint_y: None
       7:        height: sp(40)
 >>    8:        text: 'vibrator exists: ' + str(vibrator.exists())
       9:    Button:
      10:        text: 'vibrate 10s'
 ...
 NotImplementedError: 
****************************************

Step 2
main.py

from kivy.lang import Builder 
from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.togglebutton import ToggleButton
from kivy.properties import NumericProperty, StringProperty, ObjectProperty
from kivy.clock import Clock
from kivy.vector import Vector
from kivy.utils import platform
from plyer import gps

class FloatLayoutWidget(FloatLayout):
	def __init__(self, *args, **kwargs):
		super(FloatLayoutWidget, self).__init__(*args, **kwargs)

		text1 = self.ids['button1']
		text2 = self.ids['label1']
		text3 = self.ids['label2']

		text1.text='Hello'
		text1.font_size=40
		text2.text='World!'
		text3.text= 'I am waiting!'

class FloatLayoutApp(App):

	title = 'gps'
	gps_location = StringProperty()

	def __init__(self, **kwargs):
		super(FloatLayoutApp,self).__init__(**kwargs)
                self.gps=gps
                self.gps.configure(on_location=self.on_locations)

	def on_locations(self, **kwargs):
		self.gps_location = 'lat:{lat}\nlon: {lon}'.format(**kwargs)


	def build(self):
		return FloatLayoutWidget()

	def change_button_text(self,*args, **kwargs):
		text1=self.root.ids['button1']
		text2=self.root.ids['label1']

		if text1.text=='Hello':
			text1.text='World!'
			text2.text='Hello'
		else:
			text1.text='Hello'
			text2.text='World!'
 
if __name__=="__main__":
   FloatLayoutApp().run()
************
floatlayout.kv

# File name: floatlayout.kv
<Button>:
	color: .8,.9,0,1
	font_size: 40
	size_hint: .4, .3
<Label>:
	color:.8,.9,0,1
	font_size: 40
	size_hint: .4, .3

<ToggleButton>:
	color: 0.8, 0.8, 0, 1
	font_size:40
	size_hint: .4, .3
 
<FloatLayoutWidget>:
	orientation:'horizontal'

	Button:
		id:button1 
		text: 'Hello'
		pos_hint: {'x': 0, 'top': 1}
		on_press:app.change_button_text()

	ToggleButton:
		id:button2
		pos_hint:{'right':1,'top':1}
		text: 'Start' if self.state == 'normal' else 'Stop'
		on_state: app.gps.start() if self.state == 'down' else app.gps.stop

	Label:
		id:label1
		text: 'World!'
		pos_hint: {'x':0.3, 'y': 0}

	Label:
		id:label2
		text: app.gps_location
		pos_hint: {'x':0.3, 'y':0.3}
*******************
android.txt

title=lab6-gps
author=emil
orientation=landscape

Step 3

from kivy.lang import Builder
from plyer import gps
from kivy.app import App
from kivy.properties import StringProperty
from kivy.clock import Clock

kv = '''
BoxLayout:
    orientation: 'vertical'

    Label:
        text: app.gps_location

    Label:
        text: app.gps_status

    BoxLayout:
        size_hint_y: None
        height: '48dp'
        padding: '4dp'

        ToggleButton:
            text: 'Start' if self.state == 'normal' else 'Stop'
            on_state: app.gps.start() if self.state == 'down' else app.gps.stop()
'''


#def mainthread(func):
#    # This method is now part of Kivy 1.8.0. When it's released, remove it.
#    def delayed_func(*args, **kwargs):
#        def callback_func(dt):
#            func(*args, **kwargs)
#        Clock.schedule_once(callback_func, 0)
#    return delayed_func


class GpsTest(App):

    gps_location = StringProperty()
    gps_status = StringProperty('Click Start to get GPS location updates')

    def build(self):
        self.gps = gps
        try:
            self.gps.configure(on_location=self.on_location,
                    on_status=self.on_status)
        except NotImplementedError:
            import traceback; traceback.print_exc()
            self.gps_status = 'GPS is not implemented for your platform'

        return Builder.load_string(kv)

#    @mainthread
    def on_location(self, **kwargs):
        self.gps_location = '\n'.join([
            '{}={}'.format(k, v) for k, v in kwargs.items()])

#    @mainthread
    def on_status(self, stype, status):
        self.gps_status = 'type={}\n{}'.format(stype, status)

if __name__ == '__main__':
    GpsTest().run()

android.txt
title=gps2
author=teto
orientation=landscap
